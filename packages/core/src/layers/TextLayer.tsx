/**
 * A React component to view a PDF document
 *
 * @see https://react-pdf-viewer.dev
 * @license https://react-pdf-viewer.dev/license
 * @copyright 2019-2021 Nguyen Huu Phuoc <me@phuoc.ng>
 */

import * as React from 'react';

import { useIsomorphicLayoutEffect } from '../hooks/useIsomorphicLayoutEffect';
import { LayerRenderStatus } from '../structs/LayerRenderStatus';
import { PdfJsApi } from '../vendors/PdfJsApi';
import type { PdfJs } from '../types/PdfJs';
import type { Plugin } from '../types/Plugin';

export const TextLayer: React.FC<{
    page: PdfJs.Page;
    pageIndex: number;
    plugins: Plugin[];
    rotation: number;
    scale: number;
    onRenderTextCompleted: () => void;
}> = ({ page, pageIndex, plugins, rotation, scale, onRenderTextCompleted }) => {
    const containerRef = React.useRef<HTMLDivElement>();
    const renderTask = React.useRef<PdfJs.PageRenderTask>();

    const empty = (): void => {
        const containerEle = containerRef.current;
        if (!containerEle) {
            return;
        }

        const spans: HTMLElement[] = [].slice.call(containerEle.querySelectorAll('span.rpv-core__text-layer-text'));
        spans.forEach((span) => containerEle.removeChild(span));

        // Remove more elements generated by pdf.js
        const breaks: HTMLElement[] = [].slice.call(containerEle.querySelectorAll('br[role="presentation"]'));
        breaks.forEach((br) => containerEle.removeChild(br));
    };

    useIsomorphicLayoutEffect(() => {
        const task = renderTask.current;
        if (task) {
            task.cancel();
        }

        const containerEle = containerRef.current;
        if (!containerEle) {
            return;
        }
        containerEle.removeAttribute('data-testid');
        const viewport = page.getViewport({ rotation, scale });

        plugins.forEach((plugin) => {
            if (plugin.onTextLayerRender) {
                plugin.onTextLayerRender({
                    ele: containerEle,
                    pageIndex,
                    scale,
                    status: LayerRenderStatus.PreRender,
                });
            }
        });
        page.getTextContent().then((textContent) => {
            empty();
            renderTask.current = PdfJsApi.renderTextLayer({
                container: containerEle,
                textContent: textContent as any,
                viewport: viewport as any,
                enhanceTextSelection: true,
            });
            renderTask.current.promise.then(
                () => {
                    containerEle.setAttribute('data-testid', `core__text-layer-${pageIndex}`);
                    const spans: HTMLElement[] = [].slice.call(containerEle.children);
                    spans.forEach((span) => span.classList.add('rpv-core__text-layer-text'));

                    plugins.forEach((plugin) => {
                        if (plugin.onTextLayerRender) {
                            plugin.onTextLayerRender({
                                ele: containerEle,
                                pageIndex,
                                scale,
                                status: LayerRenderStatus.DidRender,
                            });
                        }
                    });
                    onRenderTextCompleted();
                },
                () => {
                    containerEle.removeAttribute('data-testid');
                    onRenderTextCompleted();
                }
            );
        });

        return () => {
            renderTask.current?.cancel();
        };
    }, []);

    return <div className="rpv-core__text-layer" ref={containerRef} />;
};
